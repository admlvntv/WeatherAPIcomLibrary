
plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    id 'maven-publish'

    id "org.sonarqube" version "3.3"
}

group = 'me.adamcraftmaster'
version = '0.1.0'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'WeatherAPIcomLibrary'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'WeatherAPIcomLibrary'
                description = 'A library for getting information from weatherapi.com'
                url = 'https://github.com/AdamCraftmaster/WeatherAPIcomLibrary'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'adamcraftmaster'
                        name = 'Adam Nativ'
                        email = 'admlvntv@gmail.com'
                    }
                }
            }
        }

    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.16.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.2'

    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

sonarqube {
  properties {
    property "sonar.projectKey", "AdamCraftmaster_WeatherAPIcomLibrary"
    property "sonar.organization", "adamcraftmaster"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

java {
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
